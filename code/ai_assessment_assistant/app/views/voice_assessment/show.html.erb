<div>
  <h1 class="font-bold text-4xl">VoiceAssessment#show</h1>
  <p>Find me in app/views/voice_assessment/show.html.erb</p>
</div>

<!-- Header with Logo -->
<header class="fixed top-0 left-0 right-0 z-40 p-6">
  <div class="flex justify-center">
    <div class="w-40 h-10 bg-gradient-to-r from-lpl-blue to-lpl-cyan rounded-lg flex items-center justify-center shadow-lg">
      <%= image_tag "White-Horizontal-LPL-Logo.svg", 
          alt: "LaunchPad Lab", 
          class: "h-6" %>
    </div>
  </div>
</header>

<!-- Gradient Background -->
<div class="gradient-bg flex items-center justify-center p-6 pt-24">
  
  <!-- Main Assessment Card -->
  <div class="glass-card rounded-3xl p-8 max-w-md w-full shadow-2xl">
    
    <!-- Header -->
    <div class="text-center mb-8">
      <h1 class="text-2xl font-bold text-white mb-2">AI Assessment</h1>
      <p class="text-slate-300 text-sm"><%= @company.name %></p>
    </div>
    
    <!-- Futuristic Wave Visualization -->
    <div class="mb-8 bg-slate-800/30 rounded-2xl p-6">
      <div id="waveVisualizer" class="flex items-center justify-center space-x-2 h-16">
        <% 10.times do |i| %>
          <div class="wave-bar w-1.5 rounded-full" style="animation-delay: <%= i * 0.1 %>s;"></div>
        <% end %>
      </div>
    </div>
    
    <!-- Conversation Transcript -->
    <div id="transcriptContainer" class="mb-8 bg-slate-800/30 rounded-2xl p-4 max-h-64 overflow-y-auto transcript-scroll">
      <div id="transcriptMessages" class="space-y-4">
        
        <!-- Initial AI Welcome Message -->
        <div class="flex space-x-3">
          <div class="flex-shrink-0">
            <div class="w-8 h-8 bg-gradient-to-r from-lpl-blue to-lpl-cyan rounded-full flex items-center justify-center">
              <span class="text-white text-xs font-semibold">AI</span>
            </div>
          </div>
          <div class="flex-1">
            <p class="text-lpl-cyan text-sm font-medium mb-1">Assistant</p>
            <p class="text-slate-200 text-sm leading-relaxed">
              Hello! I'm here to learn about <%= @company.name %>'s AI readiness. 
              <% if @company.custom_instructions.present? %>
                <%= @company.custom_instructions %>
              <% else %>
                Could you start by telling me about your role and responsibilities?
              <% end %>
            </p>
            <span class="text-slate-500 text-xs mt-1 block" id="welcomeTime"></span>
          </div>
        </div>

        <!-- Typing indicator (initially hidden) -->
        <div id="typingIndicator" class="hidden flex space-x-3">
          <div class="flex-shrink-0">
            <div class="w-8 h-8 bg-gradient-to-r from-lpl-blue to-lpl-cyan rounded-full flex items-center justify-center">
              <span class="text-white text-xs font-semibold">AI</span>
            </div>
          </div>
          <div class="flex-1">
            <p class="text-lpl-cyan text-sm font-medium mb-1">Assistant</p>
            <div class="flex space-x-1">
              <div class="w-2 h-2 bg-lpl-blue rounded-full animate-bounce"></div>
              <div class="w-2 h-2 bg-lpl-blue rounded-full animate-bounce" style="animation-delay: 0.1s;"></div>
              <div class="w-2 h-2 bg-lpl-blue rounded-full animate-bounce" style="animation-delay: 0.2s;"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Duration Status -->
    <div class="text-center mb-6">
      <p class="text-slate-400 text-sm">
        Duration: <span id="durationTimer" class="text-lpl-cyan font-medium"><%= @assessment_duration %>:00</span>
      </p>
    </div>
    
    <!-- Control Bar -->
    <div class="flex items-center justify-center space-x-6">
      
      <!-- Settings Button -->
      <button id="settingsButton" class="control-button w-12 h-12 bg-slate-700/50 rounded-full flex items-center justify-center border border-slate-600/50 hover:bg-slate-600/50">
        <svg class="w-5 h-5 text-slate-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
        </svg>
      </button>
      
      <!-- Main Microphone Button -->
      <button id="microphoneButton" class="control-button w-16 h-16 bg-gradient-to-r from-lpl-blue to-lpl-cyan rounded-full flex items-center justify-center shadow-lg border-2 border-white/20">
        <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 24 24">
          <path d="M12 14c1.66 0 2.99-1.34 2.99-3L15 5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3zm5.3-3c0 3-2.54 5.1-5.3 5.1S6.7 14 6.7 11H5c0 3.41 2.72 6.23 6 6.72V21h2v-3.28c3.28-.48 6-3.3 6-6.72h-1.7z"/>
        </svg>
      </button>
      
      <!-- End Assessment Button -->
      <button id="finishButton" class="control-button w-12 h-12 bg-red-500/20 rounded-full flex items-center justify-center border border-red-500/30 hover:bg-red-500/30">
        <svg class="w-5 h-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
      
    </div>
    
    <!-- Helper Text -->
    <div class="text-center mt-6">
      <p class="text-slate-400 text-xs">
        Tap the microphone to continue • Tap X to finish
      </p>
    </div>
    
  </div>
  
</div>

<!-- Modern Confirmation Modal -->
<div id="confirmModal" class="fixed inset-0 z-50 hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="fixed inset-0 bg-black/80 backdrop-blur-sm transition-opacity" aria-hidden="true"></div>
    
    <div class="relative glass-card rounded-2xl p-6 max-w-sm w-full">
      <div class="text-center">
        <div class="mx-auto mb-4 w-12 h-12 bg-gradient-to-r from-orange-400 to-red-500 rounded-full flex items-center justify-center">
          <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.268 15.5c-.77.833.192 2.5 1.732 2.5z"></path>
          </svg>
        </div>
        
        <h3 class="text-lg font-semibold text-white mb-2" id="modal-title">
          Finish Assessment?
        </h3>
        <p class="text-slate-300 text-sm mb-6">
          Are you sure you want to complete your assessment? This will save your responses and end the session.
        </p>
        
        <%= form_with url: complete_voice_assessment_path(@stakeholder.invitation_token), 
            method: :patch, 
            class: "space-y-3",
            data: { turbo: false } do |form| %>
          <%= form.hidden_field :final_transcript, id: "finalTranscriptField" %>
          <%= form.submit "Yes, Finish Assessment", 
              class: "w-full px-4 py-3 bg-gradient-to-r from-lpl-blue to-lpl-cyan text-white font-medium rounded-xl hover:from-lpl-blue-dark hover:to-lpl-blue transition-all duration-200" %>
        <% end %>
        
        <button type="button" id="cancelButton" class="w-full px-4 py-3 bg-slate-700/50 text-slate-200 font-medium rounded-xl hover:bg-slate-600/50 transition-all duration-200 border border-slate-600/50">
          Continue Assessment
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Voice Assessment JavaScript -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize voice assessment interface
    const VoiceAssessment = {
      init() {
        this.setupElements();
        this.setupEventListeners();
        this.startDurationTimer();
        this.initializeWaveVisualizer();
        this.setWelcomeTime();
      },

      setupElements() {
        this.finishButton = document.getElementById('finishButton');
        this.modal = document.getElementById('confirmModal');
        this.cancelButton = document.getElementById('cancelButton');
        this.microphoneButton = document.getElementById('microphoneButton');
        this.settingsButton = document.getElementById('settingsButton');
        this.transcriptContainer = document.getElementById('transcriptContainer');
        this.transcriptMessages = document.getElementById('transcriptMessages');
        this.typingIndicator = document.getElementById('typingIndicator');
        this.durationTimer = document.getElementById('durationTimer');
        this.finalTranscriptField = document.getElementById('finalTranscriptField');
        
        this.startTime = new Date();
        this.isRecording = false;
        this.transcriptData = [];
      },

      setupEventListeners() {
        this.finishButton.addEventListener('click', () => this.showConfirmModal());
        this.cancelButton.addEventListener('click', () => this.hideConfirmModal());
        this.microphoneButton.addEventListener('click', () => this.toggleMicrophone());
        this.settingsButton.addEventListener('click', () => this.showSettings());
        
        // Close modal on backdrop click
        this.modal.addEventListener('click', (e) => {
          if (e.target === this.modal) this.hideConfirmModal();
        });
      },

      showConfirmModal() {
        // Save current transcript to hidden field
        this.finalTranscriptField.value = this.getTranscriptText();
        this.modal.classList.remove('hidden');
      },

      hideConfirmModal() {
        this.modal.classList.add('hidden');
      },

      toggleMicrophone() {
        if (!this.isRecording) {
          this.startRecording();
        } else {
          this.stopRecording();
        }
      },

      startRecording() {
        this.isRecording = true;
        this.microphoneButton.classList.add('recording-pulse');
        console.log('🎙️ Recording started');
        // TODO: Implement actual microphone recording
      },

      stopRecording() {
        this.isRecording = false;
        this.microphoneButton.classList.remove('recording-pulse');
        console.log('⏹️ Recording stopped');
        // TODO: Process audio and get transcript
      },

      showSettings() {
        alert('Settings panel coming soon!');
      },

      addMessage(speaker, content, isUser = false) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'flex space-x-3';
        
        const avatarClass = isUser 
          ? 'w-8 h-8 bg-slate-600 rounded-full flex items-center justify-center'
          : 'w-8 h-8 bg-gradient-to-r from-lpl-blue to-lpl-cyan rounded-full flex items-center justify-center';
        
        const speakerLabel = isUser ? 'You' : 'Assistant';
        const speakerColor = isUser ? 'text-slate-300' : 'text-lpl-cyan';
        
        messageDiv.innerHTML = `
          <div class="flex-shrink-0">
            <div class="${avatarClass}">
              <span class="text-white text-xs font-semibold">${isUser ? 'You' : 'AI'}</span>
            </div>
          </div>
          <div class="flex-1">
            <p class="${speakerColor} text-sm font-medium mb-1">${speakerLabel}</p>
            <p class="text-slate-200 text-sm leading-relaxed">${content}</p>
            <span class="text-slate-500 text-xs mt-1 block">${this.getCurrentTime()}</span>
          </div>
        `;
        
        this.transcriptMessages.appendChild(messageDiv);
        this.scrollToBottom();
        
        // Save to transcript data
        this.transcriptData.push({
          speaker: speakerLabel,
          content: content,
          timestamp: new Date().toISOString(),
          isUser: isUser
        });
      },

      scrollToBottom() {
        this.transcriptContainer.scrollTop = this.transcriptContainer.scrollHeight;
      },

      getCurrentTime() {
        return new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
      },

      setWelcomeTime() {
        const welcomeTime = document.getElementById('welcomeTime');
        if (welcomeTime) {
          welcomeTime.textContent = this.getCurrentTime();
        }
      },

      getTranscriptText() {
        return this.transcriptData.map(msg => 
          `[${msg.timestamp}] ${msg.speaker}: ${msg.content}`
        ).join('\n');
      },

      startDurationTimer() {
        setInterval(() => {
          const elapsed = Math.floor((new Date() - this.startTime) / 1000);
          const minutes = Math.floor(elapsed / 60);
          const seconds = elapsed % 60;
          this.durationTimer.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
        }, 1000);
      },

      initializeWaveVisualizer() {
        const waveBars = document.querySelectorAll('.wave-bar');
        
        const randomizeWaves = () => {
          waveBars.forEach((bar, index) => {
            setTimeout(() => {
              const height = Math.random() * 35 + 8;
              bar.style.height = height + 'px';
            }, index * 50);
          });
        };
        
        // Update waves every 1.5 seconds for dynamic effect
        setInterval(randomizeWaves, 1500);
      }
    };

    // Initialize the voice assessment interface
    VoiceAssessment.init();
    
    // Make it globally available for testing
    window.VoiceAssessment = VoiceAssessment;
  });
</script>
